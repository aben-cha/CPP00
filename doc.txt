=============================CPP============================
* c++ is a compiled language
  ==> example :
    maic.cpp ===> compiler ===>   binary file ===> .exe
                                              ===> ./main (linux/Mac)
* compilation : c++ with flags -Wall -Wextra -Werror
    ===> code should still compile with this flag : -std=c++98
* c++ : was developed as an extension of C.
* iostream : let us work with input and output objects sush as cout
  ==> stream is power sending the data out
* cout : see out : is an object, flollowed by << operator
* namespaces : are used to avoid name collisions between different part
    of a programme  
* << insertion operation    cout <<
* >> extraction opearation  cin >>
=======================Omitting Namespace==================
* the using namespace std can be omitted and replaced 
    with [std ::] keyword
    std:: standard implementation or standard library
===============================Data type=========================
 * primitive type: int, float, char, double  : builtin type;

 * const : use as a qualifier to make a variable read-only
 * pointers : a data type that stores an address

===============================(OOP)=========================
* OOP : object oriented programming
  ==> programming paradigm which means that it is set of rules and 
    ideas and concepts it is basically a standard in programminf that
    we use to solve a specific type of problem
  ==> is to be able to represent an object from real life in your programme 
  ==> OOP is fasqter and easier to execute 
  ==> OOP helps to keep the c++code DRY : "Don't Repeat Yourself" and make
    the code easier to maintain, modify and debug.

=========================(Class && Objects)================================
* object is an instance of a class.
* class : is a template for objects
  ==> Class: User-defined type
  ==> a class can have the following kinds of members : 
    1 - data members : 
      a - non static data member, including bit fields.
      b - static data members.
    2 - member functions : 
      a - non static member functions
      b - static member function.



====================================(Reference)======================================
* std::string& str :
  ==> Pass by reference : modifies the original string more efficient (no copy).

* std::string str ;
  ==> Pass by value : does not modify the original string, but creates a copy, 
      which can be less efficient.


========================(Member initializer lists)==============================
* how we intialize our objects when we create them in c++;
* when we create an objet in c++ we have to go through these steps : 
  1 - constructing the object that means allocating some memory.
  2 - assiging some member variables
